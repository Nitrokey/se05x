[create_session]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_DEFAULT"
le = 0x0C

[create_session.payload]
TAG_1 = { name = "object_id", type = "ObjectId"}

[create_session.response]
TAG_1 = { name = "session_id", type = "SessionId"}


[exchange_session_data]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_SESSION_POLICY"

[exchange_session_data.payload]
TAG_1 = { name = "session_policy", type = "SessionPolicy"}
then = { name = "c_mac"}

[exchange_session_data.response]
then = { name = "r_mac"}

[refresh_session]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_SESSION_REFRESH"

[refresh_session.payload]
TAG_POLICY = { name = "policy", type = "SessionPolicy"}

[refresh_session.response]

[close_session]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_SESSION_CLOSE"

[close_session.payload]
[close_session.response]

[verify_session_user_id]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_SESSION_USERID"

[verify_session_user_id.payload]
TAG_1 = { name = "user_id"}

[verify_session_user_id.response]


# TODO ScpInitializeUpdate
# TODO ScpExternalAuthenticate
# TODO ECKeySessionInternalAuthenticate
# TODO ECKeySessionGetECKAPublicKey

[set_lock_state]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_TRANSPORT"

[set_lock_state.payload]
TAG_1 = { name = "lock_indicator", type = "LockIndicator"}
TAG_2 = { name = "lock_state", type = "LockState"}

# TODO SetPlatformSCPRequest
# TODO SetAppletFeatures

[write_ec_key]
cla = "NO_SM_CLA"
ins = "INS_WRITE"
maybe_transient = true
maybe_auth = true
p1 = "P1_EC"
maybe_p1_mask = { name =  "key_type", type = "P1KeyType" }
p2 = "P2_DEFAULT"

[write_ec_key.payload]
TAG_POLICY = { name = "policy", type = "SessionPolicy"}
TAG_MAX_ATTEMPTS = { name = "max_attempts", type = "Option<Be<u16>>"}
TAG_1 = { name = "object_id", type = "Option<ObjectId>" }
TAG_2 = { name = "curve", type = "Option<EcCurve>"}
TAG_3 = { name = "private_key", type = "Option<&'data [u8]>"}
TAG_4 = { name = "public_key", type = "Option<&'data [u8]>"}


[get_random]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_RANDOM"
le = "ExpectedLen::Max"

[get_random.payload]
TAG_1 = { name = "length", type = "Be<u16>" }

[get_random.response]
TAG_1 = { name = "data" }
