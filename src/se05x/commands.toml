# Copyright (C) 2023 Nitrokey GmbH
# SPDX-License-Identifier: CC0-1.0

# To be parsed by generate_commands to generate Rust code for the commands.
# The order of the TLV tags and payloads matters

# SESSION MANAGEMENT

[create_session]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_SESSION_CREATE"
le = 0x0C

[create_session.payload]
TAG_1 = { name = "object_id", type = "ObjectId" }

[create_session.response]
TAG_1 = { name = "session_id", type = "SessionId" }


[exchange_session_data]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_SESSION_POLICY"

[exchange_session_data.payload]
TAG_1 = { name = "session_policy", type = "SessionPolicy" }
# Default type is &'data [u8]
then = { name = "c_mac" }

[exchange_session_data.response]
then = { name = "r_mac" }

[refresh_session]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_SESSION_REFRESH"

[refresh_session.payload]
TAG_POLICY = { name = "policy", type = "SessionPolicy", optional = true }

[refresh_session.response]

[close_session]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_SESSION_CLOSE"

[close_session.payload]
[close_session.response]

[verify_session_user_id]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_SESSION_USERID"

[verify_session_user_id.payload]
TAG_1 = { name = "user_id" }

[verify_session_user_id.response]


# TODO ScpInitializeUpdate

[scp_initialize_update]
cla = "NO_SM_CLA"
ins = "INS_INITIALIZE_UPDATE"
p1 = "P1_DEFAULT"
p2 = "P2_DEFAULT"
le = "256"

[scp_initialize_update.payload]
then = { name = "host_challenge", type = "[u8; 8]" }

[scp_initialize_update.response]
then = { name = "se05x_challenge", type = "Se05xChallenge" }

[scp_external_authenticate]
cla = "SM_CLA"
ins = "INS_EXTERNAL_AUTHENTICATE"
p1 = "P1_DEFAULT" # TODO support security levels
p2 = "P2_DEFAULT"

[scp_external_authenticate.payload]
then = [
  { name = "host_cryptogram", type = "[u8; 8]" }
  { name = "mac", type = "[u8; 8]" }
]

[scp_external_authenticate.response]


# TODO ScpExternalAuthenticate
# TODO ECKeySessionInternalAuthenticate
# TODO ECKeySessionGetECKAPublicKey

# MODULE MANAGEMENT

[set_lock_state]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_TRANSPORT"

[set_lock_state.payload]
TAG_1 = { name = "lock_indicator", type = "TransientIndicator" }
TAG_2 = { name = "lock_state", type = "LockState" }

# TODO SetPlatformSCPRequest
# TODO SetAppletFeatures

# SECURE OBJECT MANAGEMENT

[write_ec_key]
cla = "NO_SM_CLA"
ins = "INS_WRITE"
maybe_transient = true
maybe_auth = true
p1 = "P1_EC"
maybe_p1_mask = { name =  "key_type", type = "P1KeyType" }
p2 = "P2_DEFAULT"

[write_ec_key.payload]
TAG_POLICY = { name = "policy", type = "PolicySet<'data>", optional = true }
TAG_MAX_ATTEMPTS = { name = "max_attempts", type = "Be<u16>", optional = true }
TAG_1 = { name = "object_id", type = "ObjectId" }
TAG_2 = { name = "curve", type = "EcCurve", optional = true }
TAG_3 = { name = "private_key", optional = true }
TAG_4 = { name = "public_key", optional = true }

[write_rsa_key]
cla = "NO_SM_CLA"
ins = "INS_WRITE"
maybe_transient = true
maybe_auth = true
p1 = "P1_RSA"
maybe_p1_mask = { name =  "key_type", type = "P1KeyType" }
p2 = "P2_DEFAULT"
maybe_p2_mask = { name =  "key_format", type = "RsaFormat" }

[write_rsa_key.payload]
TAG_POLICY = { name = "policy", type = "PolicySet<'data>", optional = true }
TAG_MAX_ATTEMPTS = { name = "max_attempts", type = "Be<u16>", optional = true }
TAG_1 = { name = "object_id", type = "ObjectId" }
TAG_2 = { name = "key_size", type = "Be<u16>", optional = true }
TAG_3 = { name = "p", optional = true }
TAG_4 = { name = "q", optional = true }
TAG_5 = { name = "dp", optional = true }
TAG_6 = { name = "dq", optional = true }
TAG_7 = { name = "inv_q", optional = true }
TAG_8 = { name = "e", optional = true }
TAG_9 = { name = "d", optional = true }
TAG_10 = { name = "n", optional = true }

[gen_rsa_key]
cla = "NO_SM_CLA"
ins = "INS_WRITE"
maybe_transient = true
maybe_auth = true
p1 = "P1_RSA | P1_KEY_PAIR"
p2 = "P2_RAW"

[gen_rsa_key.payload]
TAG_POLICY = { name = "policy", type = "PolicySet<'data>", optional = true }
TAG_MAX_ATTEMPTS = { name = "max_attempts", type = "Be<u16>", optional = true }
TAG_1 = { name = "object_id", type = "ObjectId" }
TAG_2 = { name = "key_size", type = "Be<u16>", optional = true }

[write_symm_key]
cla = "NO_SM_CLA"
ins = "INS_WRITE"
maybe_transient = true
maybe_auth = true
p1 = { name = "key_type", type = "SymmKeyType" }
p2 = "P2_DEFAULT"

[write_symm_key.payload]
TAG_POLICY = { name = "policy", type = "PolicySet<'data>", optional = true }
TAG_MAX_ATTEMPTS = { name = "max_attempts", type = "Be<u16>", optional = true }
TAG_1 = { name = "object_id", type = "ObjectId" }
TAG_2 = { name = "kek_id", type = "ObjectId", optional = true }
TAG_3 = { name = "value" }

[write_binary]
cla = "NO_SM_CLA"
ins = "INS_WRITE"
maybe_transient = true
p1 = "P1_BINARY"
p2 = "P2_DEFAULT"

[write_binary.payload]
TAG_POLICY = { name = "policy", type = "PolicySet<'data>", optional = true  }
TAG_1 = { name = "object_id", type = "ObjectId" }
TAG_2 = { name = "offset", type = "Be<u16>", optional = true }
TAG_3 = { name = "file_length", type = "Be<u16>", optional = true, comment = "Only when the object does not yet exists" }
TAG_4 = { name = "data", optional = true  }

[write_user_id]
cla = "NO_SM_CLA"
ins = "INS_WRITE | INS_AUTH_OBJECT"
p1 = "P1_USERID"
p2 = "P2_DEFAULT"

[write_user_id.payload]
TAG_POLICY = { name = "policy", type = "PolicySet<'data>", optional = true }
TAG_MAX_ATTEMPTS = { name = "max_attempts", type = "Be<u8>", optional = true }
TAG_1 = { name = "object_id", type = "ObjectId" }
TAG_2 = { name = "data" }

[write_counter]
cla = "NO_SM_CLA"
ins = "INS_WRITE"
maybe_transient = true
p1 = "P1_COUNTER"
p2 = "P2_DEFAULT"

[write_counter.payload]
TAG_POLICY = { name = "policy", type = "PolicySet<'data>", optional = true }
TAG_1 = { name = "object_id", type = "ObjectId" }
TAG_2 = { name = "data", type = "CounterSize", optional = true  }
TAG_3 = { name = "value", type = "Be<u64>", optional = true  }

[write_pcr]
cla = "NO_SM_CLA"
ins = "INS_WRITE"
maybe_transient = true
p1 = "P1_PCR"
p2 = "P2_DEFAULT"

[write_pcr.payload]
TAG_POLICY = { name = "policy", type = "PolicySet<'data>", optional = true }
TAG_1 = { name = "object_id", type = "ObjectId" }
TAG_2 = { name = "initial_value", optional = true  }
TAG_3 = { name = "extend", optional = true  }

[import_object]
cla = "NO_SM_CLA"
ins = "INS_WRITE"
maybe_transient = true
p1 = "P1_DEFAULT"
p2 = "P2_IMPORT"

[import_object.payload]
TAG_1 = { name = "object_id", type = "ObjectId" }
TAG_2 = { name = "rsa_key_component", type = "RsaKeyComponent", optional = true, comment = "Unlike [`ExportObject::rsa_key_component`][], use None if not importing an RSA key"  }
TAG_3 = { name = "serialized_object" }

# TODO import external object

[read_object]
cla = "NO_SM_CLA"
ins = "INS_READ"
p1 = "P1_DEFAULT"
p2 = "P2_DEFAULT"
le = "ExpectedLen::Max"

[read_object.payload]
TAG_1 = { name = "object_id", type = "ObjectId" }
TAG_2 = { name = "offset", type = "Be<u16>", optional = true  }
TAG_3 = { name = "length", type = "Be<u16>", optional = true  }
TAG_4 = { name = "rsa_key_component", optional = true, type = "RsaKeyComponent" }

[read_object.response]
TAG_1 = { name = "data" }

[read_attest_object]
cla = "NO_SM_CLA"
ins = "INS_READ | INS_ATTEST"
p1 = "P1_DEFAULT"
p2 = "P2_DEFAULT"

[read_attest_object.payload]
TAG_1 = { name = "object_id", type = "ObjectId" }
TAG_2 = { name = "offset", type = "Be<u16>", optional = true  }
TAG_3 = { name = "length", type = "Be<u16>", optional = true  }
TAG_4 = { name = "rsa_key_component", type = "RsaKeyComponent", optional = true, comment = "Either [`Mod`][RsaKeyComponent::Mod] or [`PubExp`][RsaKeyComponent::PubExp]" }
TAG_5 = { name = "attestation_object", type = "ObjectId" }
TAG_6 = { name = "attestation_algo", type = "AttestationAlgo" }
TAG_7 = { name = "freshness_random", type = "&'data [u8; 16]" }

[read_attest_object.response]
TAG_1 = { name = "data", optional = true, comment = "Is None when the object is a private key" }
TAG_2 = { name = "attributes", type = "ObjectAttributes" }
TAG_3 = { name = "timestamp", type = "&'data [u8; 12]" }
TAG_4 = { name = "freshness_random", type = "&'data [u8; 16]" }
TAG_5 = { name = "chip_unique_id", type = "&'data [u8; 18]" }
TAG_6 = { name = "signature" }

[read_attributes]
cla = "NO_SM_CLA"
ins = "INS_READ"
p1 = "P1_DEFAULT"
p2 = "P2_ATTRIBUTES"

[read_attributes.payload]
TAG_1 = { name = "object_id", type = "ObjectId" }
TAG_2 = { name = "offset", type = "Be<u16>", optional = true  }
TAG_3 = { name = "length", type = "Be<u16>", optional = true  }
TAG_4 = { name = "rsa_key_component", optional = true  }

[read_attributes.response]
TAG_2 = { name = "attributes", type = "ObjectAttributes" }

[read_attributes_attest]
cla = "NO_SM_CLA"
ins = "INS_READ | INS_ATTEST"
p1 = "P1_DEFAULT"
p2 = "P2_ATTRIBUTES"

[read_attributes_attest.payload]
TAG_1 = { name = "object_id", type = "ObjectId" }
TAG_2 = { name = "offset", type = "Be<u16>", optional = true  }
TAG_3 = { name = "length", type = "Be<u16>", optional = true  }
TAG_4 = { name = "rsa_key_component", optional = true  }
TAG_5 = { name = "attestation_object", type = "ObjectId" }
TAG_6 = { name = "attestation_algo", type = "AttestationAlgo" }
TAG_7 = { name = "freshness_random", type = "&'data [u8; 16]", optional = true  }

[read_attributes_attest.response]
TAG_2 = { name = "attributes", type = "ObjectAttributes" }
TAG_3 = { name = "timestamp", type = "&'data [u8; 12]" }
TAG_4 = { name = "freshness_random", type = "&'data [u8; 16]" }
TAG_5 = { name = "chip_unique_id", type = "&'data [u8; 18]" }
TAG_6 = { name = "signature" }

[export_object]
cla = "NO_SM_CLA"
ins = "INS_READ"
p1 = "P1_DEFAULT"
p2 = "P2_EXPORT"
le = "256"

[export_object.payload]
TAG_1 = { name = "object_id", type = "ObjectId" }
TAG_2 = { name = "rsa_key_component", type = "RsaKeyComponent", comment = "Always present. Use [`RsaKeyComponent::Na`][] if not exporting an RSA key. It is the default value with the builder API", default = "RsaKeyComponent::Na" }

[export_object.response]
TAG_1 = { name = "data" }

[read_type]
cla = "NO_SM_CLA"
ins = "INS_READ"
p1 = "P1_DEFAULT"
p2 = "P2_TYPE"
le = "ExpectedLen::Max"

[read_type.payload]
TAG_1 = { name = "object_id", type = "ObjectId" }

[read_type.response]
TAG_1 = { name = "ty", type = "SecureObjectType" }
TAG_2 = { name = "transient_indicator", type = "TransientIndicator" }

[read_size]
cla = "NO_SM_CLA"
ins = "INS_READ"
p1 = "P1_DEFAULT"
p2 = "P2_SIZE"
le = "ExpectedLen::Max"

[read_size.payload]
TAG_1 = { name = "object_id", type = "ObjectId" }

[read_size.response]
TAG_1 = { name = "size", type = "Be<u64>" }

[read_id_list]
cla = "NO_SM_CLA"
ins = "INS_READ"
p1 = "P1_DEFAULT"
p2 = "P2_LIST"
le = "ExpectedLen::Max"

[read_id_list.payload]
TAG_1 = { name = "offset", type = "Be<u16>" }
TAG_2 = { name = "filter", type = "SecureObjectFilter" }

[read_id_list.response]
TAG_1 = { name = "more", type = "MoreIndicator" }
TAG_2 = { name = "ids" } # TODO type

[check_object_exists]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_EXIST"
le = "ExpectedLen::Max"

[check_object_exists.payload]
TAG_1 = { name = "object_id", type = "ObjectId" }

[check_object_exists.response]
TAG_1 = { name = "result", type = "Se05XResult" }

[delete_secure_object]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_DELETE_OBJECT"

[delete_secure_object.payload]
TAG_1 = { name = "object_id", type = "ObjectId" }

# EC CURVE MANAGEMENT

[create_ec_curve]
cla = "NO_SM_CLA"
ins = "INS_WRITE"
p1 = "P1_CURVE"
p2 = "P2_CREATE"

[create_ec_curve.payload]
TAG_1 = { name = "curve", type = "EcCurve" }

[set_ec_curve_param]
cla = "NO_SM_CLA"
ins = "INS_WRITE"
p1 = "P1_CURVE"
p2 = "P2_PARAM"

[set_ec_curve_param.payload]
TAG_1 = { name = "curve", type = "EcCurve" }
TAG_2 = { name = "param", type = "EcCurveParam" }
TAG_3 = { name = "value" }

[get_ec_curve_id]
cla = "NO_SM_CLA"
ins = "INS_READ"
p1 = "P1_CURVE"
p2 = "P2_ID"

[get_ec_curve_id.payload]
TAG_1 = { name = "object_id", type = "ObjectId" }

[get_ec_curve_id.response]
TAG_1 = { name = "curve", type = "EcCurve" }

[read_ec_curve_list]
cla = "NO_SM_CLA"
ins = "INS_READ"
p1 = "P1_CURVE"
p2 = "P2_LIST"

[read_ec_curve_list.payload]

[read_ec_curve_list.response]
# TODO better type
TAG_1 = { name = "ids" }

[delete_ec_curve]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_CURVE"
p2 = "P2_DELETE_OBJECT"

[delete_ec_curve.payload]
TAG_1 = { name = "curve", type = "EcCurve" }

# CRYPTO OBJECT MANAGEMENT

[create_digest_object]
cla = "NO_SM_CLA"
ins = "INS_WRITE"
p1 = "P1_CRYPTO_OBJ"
p2 = "P2_DEFAULT"

[create_digest_object.payload]
TAG_1 = { name = "id", type = "CryptoObjectId" }
TAG_2 = { name = "context", type = "CryptoContext", value = "CryptoContext::Digest" }
TAG_3 = { name = "subtype", type = "Digest" }

[create_cipher_object]
cla = "NO_SM_CLA"
ins = "INS_WRITE"
p1 = "P1_CRYPTO_OBJ"
p2 = "P2_DEFAULT"

[create_cipher_object.payload]
TAG_1 = { name = "id", type = "CryptoObjectId" }
TAG_2 = { name = "context", type = "CryptoContext", value = "CryptoContext::Cipher" }
TAG_3 = { name = "subtype", type = "CipherMode" }

[create_signature_object]
cla = "NO_SM_CLA"
ins = "INS_WRITE"
p1 = "P1_CRYPTO_OBJ"
p2 = "P2_DEFAULT"

[create_signature_object.payload]
TAG_1 = { name = "id", type = "CryptoObjectId" }
TAG_2 = { name = "context", type = "CryptoContext", value = "CryptoContext::Signature" }
TAG_3 = { name = "subtype", type = "MacAlgo" }

[read_crypto_obj_list]
cla = "NO_SM_CLA"
ins = "INS_READ"
p1 = "P1_CRYPTO_OBJ"
p2 = "P2_LIST"

[read_crypto_obj_list.payload]
[read_crypto_obj_list.response]
# TODO type
TAG_1 = { name = "list" }

[delete_crypto_obj]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_CRYPTO_OBJ"
p2 = "P2_DELETE_OBJECT"

[delete_crypto_obj.payload]
TAG_1 = { name = "id", type = "CryptoObjectId" }

# EC CRYPTO OPERATIONS

## Signature

[ecdsa_sign]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_SIGNATURE"
p2 = "P2_SIGN"
le = "ExpectedLen::Max"

[ecdsa_sign.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "algo", type = "EcDsaSignatureAlgo" }
TAG_3 = { name = "data" }

[ecdsa_sign.response]
# TODO type (ASN.1 format parsing)
TAG_1 = { name = "signature" }

[eddsa_sign]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_SIGNATURE"
p2 = "P2_SIGN"
le = "ExpectedLen::Max"

[eddsa_sign.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "algo", type = "EdDsaSignatureAlgo", value = "EdDsaSignatureAlgo::Pure" }
TAG_3 = { name = "data" }

[eddsa_sign.response]
TAG_1 = { name = "signature" }

[ecdaa_sign]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_SIGNATURE"
p2 = "P2_SIGN"
le = "ExpectedLen::Max"

[ecdaa_sign.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "algo", type = "EcDaaSignatureAlgo", value = "EcDaaSignatureAlgo::EcDaa" }
TAG_3 = { name = "data", type = "[u8; 32]" }
TAG_4 = { name = "random_data", type = "[u8; 32]" }

[ecdaa_sign.response]
TAG_1 = { name = "signature" }

## Signature verification

[ecdsa_verify]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_SIGNATURE"
p2 = "P2_VERIFY"
le = 0x03

[ecdsa_verify.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "algo", type = "EcDsaSignatureAlgo" }
TAG_3 = { name = "data" }
# TODO type (ASN.1 format parsing)
TAG_5 = { name = "signature" }

[ecdsa_verify.response]
TAG_1 = { name = "result", type = "Se05XResult" }

[eddsa_verify]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_SIGNATURE"
p2 = "P2_VERIFY"
le = 0x03

[eddsa_verify.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "algo", type = "EdDsaSignatureAlgo", value = "EdDsaSignatureAlgo::Pure" }
TAG_3 = { name = "data" }
TAG_5 = { name = "signature" }

[eddsa_verify.response]
TAG_1 = { name = "result", type = "Se05XResult" }

## Shared secret generation

[ecdh_generate_shared_secret]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_EC"
p2 = "P2_DH"
le = "ExpectedLen::Max"

[ecdh_generate_shared_secret.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "public_key" }

[ecdh_generate_shared_secret.response]
TAG_1 = { name = "shared_secret" }

# RSA Operations

[rsa_sign]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_SIGNATURE"
p2 = "P2_SIGN"
le = "ExpectedLen::Max"

[rsa_sign.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "algo", type = "RsaSignatureAlgo" }
TAG_3 = { name = "data" }

[rsa_sign.response]
# TODO type (ASN.1 signature)
TAG_1 = { name = "signature" }

[rsa_verify]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_SIGNATURE"
p2 = "P2_VERIFY"
le = 0x03

[rsa_verify.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "algo", type = "RsaSignatureAlgo" }
TAG_3 = { name = "data" }
# TODO type (ASN.1 signature)
TAG_5 = { name = "signature" }

[rsa_verify.response]
# TODO type (ASN.1 signature)
TAG_1 = { name = "result", type = "Se05XResult" }

[rsa_encrypt]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_RSA"
p2 = "P2_ENCRYPT_ONESHOT"
le = "ExpectedLen::Max"

[rsa_encrypt.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "algo", type = "RsaEncryptionAlgo" }
TAG_3 = { name = "plaintext" }

[rsa_encrypt.response]
TAG_1 = { name = "ciphertext" }

[rsa_decrypt]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_RSA"
p2 = "P2_DECRYPT_ONESHOT"
le = "ExpectedLen::Max"

[rsa_decrypt.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "algo", type = "RsaEncryptionAlgo" }
TAG_3 = { name = "ciphertext" }

[rsa_decrypt.response]
TAG_1 = { name = "plaintext" }

# Crypto operations AES/DES

[cipher_encrypt_init]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_CIPHER"
p2 = "P2_ENCRYPT"

[cipher_encrypt_init.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "cipher_id", type = "CryptoObjectId" }
TAG_4 = { name = "initialization_vector", optional = true }

[cipher_decrypt_init]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_CIPHER"
p2 = "P2_DECRYPT"

[cipher_decrypt_init.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "cipher_id", type = "CryptoObjectId" }
TAG_4 = { name = "initialization_vector", optional = true }

[cipher_update]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_CIPHER"
p2 = "P2_UPDATE"
le = "ExpectedLen::Max"

[cipher_update.payload]
TAG_2 = { name = "cipher_id", type = "CryptoObjectId" }
TAG_3 = { name = "data", comment = "input data, can be either plaintext or ciphertext depending on whether cipher_decrypt_init or cipher_encrypt_init was used" }

[cipher_update.response]
TAG_1 = { name = "data", comment = "output data" }

[cipher_final]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_CIPHER"
p2 = "P2_FINAL"
le = "ExpectedLen::Max"

[cipher_final.payload]
TAG_2 = { name = "cipher_id", type = "CryptoObjectId" }
TAG_3 = { name = "data", comment = "input data, can be either plaintext or ciphertext depending on whether cipher_decrypt_init or cipher_encrypt_init was used" }

[cipher_final.response]
TAG_1 = { name = "data", comment = "output data" }

[cipher_one_shot_encrypt]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_CIPHER"
p2 = "P2_ENCRYPT_ONESHOT"
le = "ExpectedLen::Max"

[cipher_one_shot_encrypt.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "mode", type = "CipherMode" }
TAG_3 = { name = "plaintext" }
TAG_4 = { name = "initialization_vector", optional = true }

[cipher_one_shot_encrypt.response]
TAG_1 = { name = "ciphertext" }

[cipher_one_shot_decrypt]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_CIPHER"
p2 = "P2_DECRYPT_ONESHOT"
le = "ExpectedLen::Max"

[cipher_one_shot_decrypt.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "mode", type = "CipherMode" }
TAG_3 = { name = "ciphertext" }
TAG_4 = { name = "initialization_vector", optional = true }

[cipher_one_shot_decrypt.response]
TAG_1 = { name = "plaintext" }

# MAC

[mac_generate_init]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_MAC"
p2 = "P2_GENERATE"

[mac_generate_init.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "mac_id", type = "CryptoObjectId" }

[mac_validate_init]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_MAC"
p2 = "P2_VALIDATE"

[mac_validate_init.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "mac_id", type = "CryptoObjectId" }

[mac_update]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_MAC"
p2 = "P2_UPDATE"

[mac_update.payload]
TAG_1 = { name = "data" }
TAG_2 = { name = "mac_id", type = "CryptoObjectId" }

[mac_generate_final]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_MAC"
p2 = "P2_FINAL"
le = "ExpectedLen::Max"

[mac_generate_final.payload]
TAG_1 = { name = "data" }
TAG_2 = { name = "mac_id", type = "CryptoObjectId" }

[mac_generate_final.response]
TAG_1 = { name = "tag" }

[mac_validate_final]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_MAC"
p2 = "P2_FINAL"
le = "ExpectedLen::Max"

[mac_validate_final.payload]
TAG_1 = { name = "data" }
TAG_2 = { name = "mac_id", type = "CryptoObjectId" }
TAG_3 = { name = "tag", comment = "Tag to validate"}

[mac_validate_final.response]
TAG_1 = { name = "result", type = "Se05XResult" }

[mac_one_shot_generate]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_MAC"
p2 = "P2_GENERATE_ONESHOT"
le = "ExpectedLen::Max"

[mac_one_shot_generate.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "algo", type = "MacAlgo" }
TAG_3 = { name = "data" }

[mac_one_shot_generate.response]
TAG_1 = { name = "tag" }

[mac_one_shot_validate]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_MAC"
p2 = "P2_VALIDATE_ONESHOT"
le = "ExpectedLen::Max"

[mac_one_shot_validate.payload]
TAG_1 = { name = "key_id", type = "ObjectId" }
TAG_2 = { name = "algo", type = "MacAlgo" }
TAG_3 = { name = "data" }
TAG_5 = { name = "tag", comment = "tag to validate" }

[mac_one_shot_validate.response]
TAG_1 = { name = "result", type = "Se05XResult" }

# Key derivation functions

[hkdf]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_DEFAULT"
p2 = "P2_HKDF"
le = "ExpectedLen::Max"

[hkdf.payload]
TAG_1 = { name = "ikm", type = "ObjectId" }
TAG_2 = { name = "digest", type = "Digest" }
TAG_3 = { name = "salt", comment = "up to 64 bytes", optional = true }
TAG_4 = { name = "info", optional = true }
TAG_5 = { name = "requested_len", type = "Be<u16>", comment = "Up to MAX_APDU_PAYLOAD_LENGTH (= 889)"}

[hkdf.response]
TAG_1 = { name = "data" }

[pbkdf2]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_DEFAULT"
p2 = "P2_PBKDF"
le = "ExpectedLen::Max"

[pbkdf2.payload]
TAG_1 = { name = "password", type = "ObjectId" }
TAG_2 = { name = "salt", comment = "up to 64 bytes", optional = true }
TAG_3 = { name = "iterations", type = "Be<u16>", comment = "Up to 0x7FFF" }
TAG_4 = { name = "requested_len", type = "Be<u16>", comment = "Up to 512" }

[pbkdf2.response]
TAG_1 = { name = "data" }

# TODO MIFARE DESFire 
# TODO TLS handshake support

# Digest Operations

[digest_init]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_DEFAULT"
p2 = "P2_INIT"

[digest_init.payload]
TAG_2 = { name = "digest_id", type = "CryptoObjectId" }

[digest_update]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_DEFAULT"
p2 = "P2_UPDATE"

[digest_update.payload]
TAG_2 = { name = "digest_id", type = "CryptoObjectId" }
TAG_3 = { name = "data" }

[digest_final]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_DEFAULT"
p2 = "P2_FINAL"
le = "ExpectedLen::Max"

[digest_final.payload]
TAG_2 = { name = "digest_id", type = "CryptoObjectId" }
TAG_3 = { name = "data" }

[digest_final.response]
TAG_1 = { name = "digest" }

[digest_one_shot]
cla = "NO_SM_CLA"
ins = "INS_CRYPTO"
p1 = "P1_DEFAULT"
p2 = "P2_ONESHOT"
le = "ExpectedLen::Max"

[digest_one_shot.payload]
TAG_1 = { name = "algo", type = "Digest" }
TAG_2 = { name = "data" }

[digest_one_shot.response]
TAG_1 = { name = "digest" }


[get_version]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_VERSION"
le = 0xB

[get_version.payload]
[get_version.response]
TAG_1 = { name = "version_info", type = "VersionInfo" }

[get_timestamp]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_TIME"
le = 0x14

[get_timestamp.payload]
[get_timestamp.response]
TAG_1 = { name = "timestamp", type = "&'data [u8; 12]" }

[get_free_memory]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_MEMORY"
le = 0x06

[get_free_memory.payload]
TAG_1 = { name = "memory", type = "Memory"}
[get_free_memory.response]
TAG_1 = { name = "available", type = "Be<u16>" }

[get_random]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_RANDOM"
le = "ExpectedLen::Max"

[get_random.payload]
TAG_1 = { name = "length", type = "Be<u16>" }

[get_random.response]
TAG_1 = { name = "data" }

[delete_all]
cla = "NO_SM_CLA"
ins = "INS_MGMT"
p1 = "P1_DEFAULT"
p2 = "P2_DELETE_ALL"
le = "ExpectedLen::Max"

[delete_all.payload]

